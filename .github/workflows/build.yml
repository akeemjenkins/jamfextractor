name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.24'

jobs:
  build:
    name: Build for ${{ matrix.os }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Apple Silicon Macs (ARM64)
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
            output_name: jamf-extractor-darwin-arm64
          # Intel Macs (AMD64)
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            output_name: jamf-extractor-darwin-amd64
          # Linux x86_64
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            output_name: jamf-extractor-linux-amd64
          # Windows x86_64
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
            output_name: jamf-extractor-windows-amd64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: go test -v ./...

    - name: Build binary
      run: |
        GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="-s -w" -o ${{ matrix.output_name }}${{ matrix.goos == 'windows' && '.exe' || '' }} .
      shell: bash

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.output_name }}
        path: ${{ matrix.output_name }}${{ matrix.goos == 'windows' && '.exe' || '' }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts

    - name: Create checksums
      run: |
        cd artifacts
        for file in */jamf-extractor-*; do
          if [ -f "$file" ]; then
            sha256sum "$file" > "${file}.sha256"
          fi
        done

    - name: Create release archive
      run: |
        cd artifacts
        for dir in */; do
          if [ -d "$dir" ]; then
            cd "$dir"
            tar -czf "../${dir%/}.tar.gz" *
            cd ..
          fi
        done

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          artifacts/*.tar.gz
          artifacts/*/*.sha256
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
